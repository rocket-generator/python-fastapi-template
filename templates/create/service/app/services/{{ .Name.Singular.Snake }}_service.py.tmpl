from typing import Optional, Tuple, List

from injector import Injector, inject
from sqlalchemy.orm import scoped_session

from ..config import Config
from ..exceptions import ClientSideError
from ..interfaces.services.{{ .Name.Singular.Snake }}_service_interface import \
    {{ .Name.Singular.Title }}ServiceInterface
from ..libraries import AccessToken, Hash

{{- if ne .RelatedModels nil }}
{{- range .RelatedModels}}
from ..models.{{ .Singular.Snake }} import {{ .Singular.Title }}
{{- end }}

{{- range .RelatedModels}}
from ..interfaces.repositories.{{ .Singular.Snake }}_repository_interface import {{ .Singular.Title }}RepositoryInterface
{{- end }}
{{- end }}


class {{ .Name.Singular.Title }}Service({{ .Name.Singular.Title }}ServiceInterface):

    @inject
    def __init__(self,
{{- if ne .RelatedModels nil }}
{{- range .RelatedModels}}
                {{ .Singular.Snake }}_repository: {{ .Singular.Title }}RepositoryInterface,
{{- end }}
{{- end }}
{{- if .IsAuthService }}
                 _hash: Hash, _access_token: AccessToken,
{{- end }}
                 _config: Config):
{{- if ne .RelatedModels nil }}

{{- range .RelatedModels}}
        self._{{ .Singular.Snake }}_repository = {{ .Singular.Snake }}_repository
{{- end }}
{{- end }}

{{- if .IsAuthService }}
        self._hash = _hash
        self._access_token = _access_token
{{- end }}
        self._config = _config

{{- if .IsAuthService }}
    def sign_in(self, email: str,
                password: str) -> Tuple[Optional[{{ .Name.Singular.Title }}], Optional[str]]:
        {{ .Name.Singular.Snake }} = self._{{ .Name.Singular.Snake }}_repository.get_by_email(email)
        if {{ .Name.Singular.Snake }} is None:
            return None, None

        if self._hash.verify_hash(password, {{ .Name.Singular.Snake }}.password):
            return {{ .Name.Singular.Snake }}, self.generate_access_token(str({{ .Name.Singular.Snake }}.id))

        return None, None

    def generate_access_token(self, {{ .Name.Singular.Snake }}_id: str) -> str:
        encoded_jwt = self._access_token.create_access_token({
            "sub":
            {{ .Name.Singular.Snake }}_id,
            "user_id":
            {{ .Name.Singular.Snake }}_id
        })
        return encoded_jwt

    def get_{{ .Name.Singular.Snake }}_by_token(self,
                                access_token: str) -> Optional[{{ .Name.Singular.Title }}]:
        decoded_jwt = self._access_token.extract_from_token(token=access_token)
        if decoded_jwt is None:
            return None
        {{ .Name.Singular.Snake }}_id = decoded_jwt["user_id"]
        {{ .Name.Singular.Snake }} = self._{{ .Name.Singular.Snake }}_repository.get_by_id({{ .Name.Singular.Snake }}_id)

        return {{ .Name.Singular.Snake }}
{{- end }}

{{- if ne .RelatedModels nil }}
{{- range .RelatedModels}}
    def count_{{ .Plural.Snake }}(self) -> int:
        return self._{{ .Singular.Snake }}_repository.count()

    def get_{{ .Plural.Snake }}(self, offset: int = 0, limit: int = 20) -> List[{{ .Singular.Title }}]:
        return self._{{ .Singular.Snake }}_repository.list(offset=offset, limit=limit)

    def get_{{ .Singular.Snake }}_by_id(self, {{ .Singular.Snake }}_id: str) -> Optional[{{ .Singular.Title }}]:
        return self._{{ .Singular.Snake }}_repository.get_by_id({{ .Singular.Snake }}_id)

    def create_{{ .Singular.Snake }}(self, data: dict) -> Optional[{{ .Singular.Title }}]:
        return self._{{ .Singular.Snake }}_repository.create(data)

    def update_{{ .Singular.Snake }}(self, {{ .Singular.Snake }}_id: str,
                          data: dict) -> Optional[{{ .Singular.Title }}]:
        model = self._{{ .Singular.Snake }}_repository.get_by_id({{ .Singular.Snake }}_id)
        if model is None:
            raise ClientSideError("Model not found")

        updated_model = self._{{ .Singular.Snake }}_repository.update({{ .Singular.Snake }}_id, data)
        return updated_model

    def delete_{{ .Singular.Snake }}(self, {{ .Singular.Snake }}_id: str) -> bool:
        self._{{ .Singular.Snake }}_repository.delete({{ .Singular.Snake }}_id)
        return True
{{- end }}
{{- else }}
    pass
{{- end }}
