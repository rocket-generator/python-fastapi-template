from pydantic import BaseModel
{{- if ne .TargetModel nil }}

from ...models.{{ .TargetModel.Singular.Snake }} import {{ .TargetModel.Singular.Title }} as Model
{{- end }}
{{- if .SuccessResponse.IsList }}

from .{{ .SuccessResponse.Schema.Name.Singular.Snake }} import {{ .SuccessResponse.Schema.Name.Singular.Title }}
{{- end }}


class {{ .SuccessResponse.Schema.Name.Default.Title }}(BaseModel):
{{- range .SuccessResponse.Schema.Properties}}
    {{ .Name.Original }}: {{ .CodeType }}
{{- end}}
{{- if .SuccessResponse.IsList }}

    @classmethod
    def from_model(cls, data: [Model], count: int) -> '{{ .SuccessResponse.Schema.Name.Default.Title }}':
        data = [{{ .SuccessResponse.Schema.Name.Singular.Title }}.from_model(model) for model in data]
        return cls(data=data, count=count)
{{- else }}
{{- if ne .TargetModel nil }}

    @classmethod
    def from_model(cls, model: Model) -> '{{ .SuccessResponse.Schema.Name.Default.Title }}':
        return cls(**model.model_dump())
{{- end }}
{{- end }}
